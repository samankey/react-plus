diff --git a/node_modules/@nrwl/cypress/src/plugins/preprocessor-vite.js b/node_modules/@nrwl/cypress/src/plugins/preprocessor-vite.js
index 7a3c92c..8b27a12 100644
--- a/node_modules/@nrwl/cypress/src/plugins/preprocessor-vite.js
+++ b/node_modules/@nrwl/cypress/src/plugins/preprocessor-vite.js
@@ -1,25 +1,45 @@
 "use strict";
-// Adapted from: https://github.com/mammadataei/cypress-vite
+/**
+ * https://github.com/mammadataei/cypress-vite
+ *
+ * MIT License
+ *
+ * Copyright (c) 2022 Mohammad Ataei
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in
+ * the Software without restriction, including without limitation the rights to
+ * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+ * the Software, and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const path = require("path");
+const path_1 = require("path");
+const cache = new Map();
 /**
- * Cypress preprocessor for running e2e tests using vite.
- *
- * @param {string} userConfigPath
- * @example
- * setupNodeEvents(on) {
- *   on(
- *     'file:preprocessor',
- *     vitePreprocessor(path.resolve(__dirname, './vite.config.ts')),
- *   )
- * },
+ * Use Vite as a file preprocess for Cypress test files.
+ * This preprocessor shouldn't be used directly.
+ * Instead, use the nxE2EPreset(__filename, { bundler: 'vite' }) function instead.
  */
 function vitePreprocessor(userConfigPath) {
     return (file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
         const { outputPath, filePath, shouldWatch } = file;
-        const fileName = path.basename(outputPath);
-        const filenameWithoutExtension = path.basename(outputPath, path.extname(outputPath));
+        if (cache.has(filePath)) {
+            return cache.get(filePath);
+        }
+        const fileName = (0, path_1.basename)(outputPath);
+        const filenameWithoutExtension = (0, path_1.basename)(outputPath, (0, path_1.extname)(outputPath));
         const defaultConfig = {
             logLevel: 'silent',
             define: {
@@ -28,7 +48,7 @@ function vitePreprocessor(userConfigPath) {
             build: {
                 emptyOutDir: false,
                 minify: false,
-                outDir: path.dirname(outputPath),
+                outDir: (0, path_1.dirname)(outputPath),
                 sourcemap: true,
                 write: true,
                 watch: getWatcherConfig(shouldWatch),
@@ -40,29 +60,37 @@ function vitePreprocessor(userConfigPath) {
                 },
             },
         };
+        cache.set(filePath, outputPath);
         const { build } = require('vite');
-        const watcher = yield build(Object.assign({ configFile: userConfigPath }, defaultConfig));
-        if (shouldWatch && isWatcher(watcher)) {
-            watcher.on('event', (event) => {
-                if (event.code === 'END') {
-                    file.emit('rerun');
-                }
-                if (event.code === 'ERROR') {
-                    console.error(event);
-                }
-            });
-            file.on('close', () => {
-                watcher.close();
-            });
-        }
-        return outputPath;
+        const watcher = (yield build(Object.assign({ configFile: userConfigPath }, defaultConfig)));
+        return new Promise((resolve, reject) => {
+            if (shouldWatch && isWatcher(watcher)) {
+                watcher.on('event', (event) => {
+                    if (event.code === 'END') {
+                        resolve(outputPath);
+                        file.emit('rerun');
+                    }
+                    if (event.code === 'ERROR') {
+                        console.error(event);
+                        reject(new Error(event.error.message));
+                    }
+                });
+                file.on('close', () => {
+                    cache.delete(filePath);
+                    watcher.close();
+                });
+            }
+            else {
+                resolve(outputPath);
+            }
+        });
     });
 }
+function isWatcher(maybeWatcher) {
+    return maybeWatcher.on !== undefined;
+}
 function getWatcherConfig(shouldWatch) {
     return shouldWatch ? {} : null;
 }
-function isWatcher(watcher) {
-    return watcher.on !== undefined;
-}
 exports.default = vitePreprocessor;
 //# sourceMappingURL=preprocessor-vite.js.map
