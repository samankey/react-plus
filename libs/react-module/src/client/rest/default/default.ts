/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * demo api server
 * demo api
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { DummyModel01, DummyControllerGetTestParams } from '.././model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const appControllerGetData = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api`, options);
};

export const getAppControllerGetDataQueryKey = () => [`/api`] as const;

export const getAppControllerGetDataQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetData>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetData>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof appControllerGetData>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetDataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetData>>
  > = ({ signal }) => appControllerGetData({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type AppControllerGetDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetData>>
>;
export type AppControllerGetDataQueryError = AxiosError<unknown>;

export const useAppControllerGetData = <
  TData = Awaited<ReturnType<typeof appControllerGetData>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetData>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerGetDataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const dummyControllerGetTest = (
  params: DummyControllerGetTestParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DummyModel01>> => {
  return axios.get(`/api/dummy/get-test`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDummyControllerGetTestQueryKey = (
  params: DummyControllerGetTestParams
) => [`/api/dummy/get-test`, ...(params ? [params] : [])] as const;

export const getDummyControllerGetTestQueryOptions = <
  TData = Awaited<ReturnType<typeof dummyControllerGetTest>>,
  TError = AxiosError<unknown>
>(
  params: DummyControllerGetTestParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dummyControllerGetTest>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof dummyControllerGetTest>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDummyControllerGetTestQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dummyControllerGetTest>>
  > = ({ signal }) =>
    dummyControllerGetTest(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type DummyControllerGetTestQueryResult = NonNullable<
  Awaited<ReturnType<typeof dummyControllerGetTest>>
>;
export type DummyControllerGetTestQueryError = AxiosError<unknown>;

export const useDummyControllerGetTest = <
  TData = Awaited<ReturnType<typeof dummyControllerGetTest>>,
  TError = AxiosError<unknown>
>(
  params: DummyControllerGetTestParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dummyControllerGetTest>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDummyControllerGetTestQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
